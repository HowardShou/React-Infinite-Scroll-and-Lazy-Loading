{"version":3,"sources":["App.js","customHooks.js","serviceWorker.js","index.js"],"names":["App","data","dispatch","useReducer","state","action","type","page","pager","pagerDispatch","images","concat","fetching","imgData","imgDispatch","bottomBoundaryRef","useRef","useEffect","fetch","then","json","catch","e","imgSelector","items","imgObserver","useCallback","node","intObs","IntersectionObserver","entries","forEach","en","intersectionRatio","currentImg","target","newImgSrc","dataset","src","console","error","unobserve","observe","imagesRef","current","document","querySelectorAll","img","useLazyLoading","scrollRef","scrollObserver","useInfiniteScroll","className","href","id","map","image","index","author","download_url","key","alt","data-src","style","border","ref","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+LA6EeA,MAxEf,WACE,ICHuBC,EAAMC,EDEhB,EAqBkBC,sBATX,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,eAAKF,EAAZ,CAAmBG,KAAMH,EAAMG,KAAO,IACxC,QACE,OAAOH,KAI0C,CAAEG,KAAM,IArBlD,mBAqBNC,EArBM,KAqBCC,EArBD,OAsBkBN,sBArBZ,SAACC,EAAOC,GACzB,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,eAAKF,EAAZ,CAAmBM,OAAQN,EAAMM,OAAOC,OAAON,EAAOK,UACxD,IAAK,kBACH,OAAO,eAAKN,EAAZ,CAAmBQ,SAAUP,EAAOO,WACtC,QACE,OAAOR,KAcyC,CAAEM,OAAQ,GAAIE,UAAU,IAtBjE,mBAsBNC,EAtBM,KAsBGC,EAtBH,KAwBTC,EAAoBC,iBAAO,MAK/B,OC/BuBf,ED2BdO,EC3BoBN,ED2BbY,EC1BhBG,qBAAU,WACRf,EAAS,CAAEI,KAAM,kBAAmBM,UAAU,IAC9CM,MAAM,sCAAD,OAAuCjB,EAAKM,KAA5C,cACFY,MAAK,SAAAlB,GAAI,OAAIA,EAAKmB,UAClBD,MAAK,SAAAT,GACJR,EAAS,CAAEI,KAAM,eAAgBI,WACjCR,EAAS,CAAEI,KAAM,kBAAmBM,UAAU,OAE/CS,OAAM,SAAAC,GAGL,OADApB,EAAS,CAAEI,KAAM,kBAAmBM,UAAU,IACvCU,OAEV,CAACpB,EAAUD,EAAKM,OA0BS,SAACgB,EAAaC,GAC1C,IAAMC,EAAcC,uBAAY,SAAAC,GAC9B,IAAMC,EAAS,IAAIC,sBAAqB,SAAAC,GACtCA,EAAQC,SAAQ,SAAAC,GACd,GAAIA,EAAGC,kBAAoB,EAAG,CAC5B,IAAMC,EAAaF,EAAGG,OAChBC,EAAYF,EAAWG,QAAQC,IAGhCF,EAGHF,EAAWI,IAAMF,EAFjBG,QAAQC,MAAM,2BAIhBZ,EAAOa,UAAUd,UAIvBC,EAAOc,QAAQf,KACd,IAEGgB,EAAY3B,iBAAO,MAEzBC,qBAAU,WACR0B,EAAUC,QAAUC,SAASC,iBAAiBvB,GAE1CoB,EAAUC,SACZD,EAAUC,QAAQb,SAAQ,SAAAgB,GAAG,OAAItB,EAAYsB,QAE9C,CAACtB,EAAakB,EAAWpB,EAAaC,IDzCzCwB,CAAe,gBAAiBnC,EAAQH,QCVT,SAACuC,EAAW/C,GAC3C,IAAMgD,EAAiBxB,uBACrB,SAAAC,GACE,IAAIE,sBAAqB,SAAAC,GACvBA,EAAQC,SAAQ,SAAAC,GACVA,EAAGC,kBAAoB,GACzB/B,EAAS,CAAEI,KAAM,uBAGpBoC,QAAQf,KAEb,CAACzB,IAGHe,qBAAU,WACJgC,EAAUL,SACZM,EAAeD,EAAUL,WAE1B,CAACM,EAAgBD,IDPpBE,CAAkBpC,EAAmBN,GAGnC,yBAAK2C,UAAU,IACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,eAAeC,KAAK,MAC/B,uEAKN,yBAAKC,GAAG,SAASF,UAAU,aACzB,yBAAKA,UAAU,OACZvC,EAAQH,OAAO6C,KAAI,SAACC,EAAOC,GAAW,IAC7BC,EAAyBF,EAAzBE,OAAQC,EAAiBH,EAAjBG,aAChB,OACE,yBAAKC,IAAKH,EAAOL,UAAU,QACzB,yBAAKA,UAAU,cACb,yBACES,IAAKH,EACLI,WAAUH,EACVP,UAAU,eACVd,IAAK,2DAGT,yBAAKc,UAAU,eACb,uBAAGA,UAAU,sDAAb,YAA4EM,UAQvF7C,EAAQD,UACP,yBAAKwC,UAAU,uCACb,uBAAGA,UAAU,kBAAb,mBAGJ,yBAAKE,GAAG,uBAAuBS,MAAO,CAAEC,OAAQ,iBAAmBC,IAAKlD,ME5D1DmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAAS4B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdzD,OAAM,SAAAmB,GACLD,QAAQC,MAAMA,EAAMuC,a","file":"static/js/main.12669cb8.chunk.js","sourcesContent":["import React, { useReducer, useRef } from 'react';\n\nimport { useFetch, useInfiniteScroll, useLazyLoading } from './customHooks'\nimport './index.css';\n\nfunction App() {\n  const imgReducer = (state, action) => {\n    switch (action.type) {\n      case 'STACK_IMAGES':\n        return { ...state, images: state.images.concat(action.images) }\n      case 'FETCHING_IMAGES':\n        return { ...state, fetching: action.fetching }\n      default:\n        return state;\n    }\n  }\n\n  const pageReducer = (state, action) => {\n    switch (action.type) {\n      case 'ADVANCE_PAGE':\n        return { ...state, page: state.page + 1 }\n      default:\n        return state;\n    }\n  }\n\n  const [pager, pagerDispatch] = useReducer(pageReducer, { page: 0 })\n  const [imgData, imgDispatch] = useReducer(imgReducer, { images: [], fetching: true, })\n\n  let bottomBoundaryRef = useRef(null);\n  useFetch(pager, imgDispatch);\n  useLazyLoading('.card-img-top', imgData.images)\n  useInfiniteScroll(bottomBoundaryRef, pagerDispatch);\n\n  return (\n    <div className=\"\">\n      <nav className=\"navbar bg-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"/#\">\n            <h2>Infinite scroll + image lazy loading</h2>\n          </a>\n        </div>\n      </nav>\n\n      <div id='images' className=\"container\">\n        <div className=\"row\">\n          {imgData.images.map((image, index) => {\n            const { author, download_url } = image\n            return (\n              <div key={index} className=\"card\">\n                <div className=\"card-body \">\n                  <img\n                    alt={author}\n                    data-src={download_url}\n                    className=\"card-img-top\"\n                    src={'https://picsum.photos/id/870/300/300?grayscale&blur=2'}\n                  />\n                </div>\n                <div className=\"card-footer\">\n                  <p className=\"card-text text-center text-capitalize text-primary\">Shot by: {author}</p>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n\n      {imgData.fetching && (\n        <div className=\"text-center bg-secondary m-auto p-3\">\n          <p className=\"m-0 text-white\">Getting images</p>\n        </div>\n      )}\n      <div id='page-bottom-boundary' style={{ border: '1px solid red' }} ref={bottomBoundaryRef}></div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useCallback, useRef } from 'react';\n\n// make API calls and pass the returned data via dispatch\nexport const useFetch = (data, dispatch) => {\n  useEffect(() => {\n    dispatch({ type: 'FETCHING_IMAGES', fetching: true })\n    fetch(`https://picsum.photos/v2/list?page=${data.page}&limit=10`)\n      .then(data => data.json())\n      .then(images => {\n        dispatch({ type: 'STACK_IMAGES', images })\n        dispatch({ type: 'FETCHING_IMAGES', fetching: false })\n      })\n      .catch(e => {\n        // handle error\n        dispatch({ type: 'FETCHING_IMAGES', fetching: false })\n        return e;\n      })\n  }, [dispatch, data.page])\n}\n\n// infinite scrolling with intersection observer\nexport const useInfiniteScroll = (scrollRef, dispatch) => {\n  const scrollObserver = useCallback(\n    node => {\n      new IntersectionObserver(entries => {\n        entries.forEach(en => {\n          if (en.intersectionRatio > 0) {\n            dispatch({ type: 'ADVANCE_PAGE' });\n          }\n        });\n      }).observe(node);\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current);\n    }\n  }, [scrollObserver, scrollRef]);\n}\n\n// lazy load images with intersection observer\nexport const useLazyLoading = (imgSelector, items) => {\n  const imgObserver = useCallback(node => {\n    const intObs = new IntersectionObserver(entries => {\n      entries.forEach(en => {\n        if (en.intersectionRatio > 0) {\n          const currentImg = en.target;\n          const newImgSrc = currentImg.dataset.src;\n\n          // only swap out the image source if the new url exists\n          if (!newImgSrc) {\n            console.error('Image source is invalid');\n          } else {\n            currentImg.src = newImgSrc;\n          }\n          intObs.unobserve(node);\n        }\n      });\n    })\n    intObs.observe(node);\n  }, []);\n\n  const imagesRef = useRef(null);\n\n  useEffect(() => {\n    imagesRef.current = document.querySelectorAll(imgSelector);\n\n    if (imagesRef.current) {\n      imagesRef.current.forEach(img => imgObserver(img));\n    }\n  }, [imgObserver, imagesRef, imgSelector, items])\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}